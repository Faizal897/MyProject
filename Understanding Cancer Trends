{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":10442055,"sourceType":"datasetVersion","datasetId":6463148}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/faizalrosyid/understanding-cancer-trends?scriptVersionId=217734059\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# **Understanding Cancer Trends: Data Cleaning, Processing, and Prediction**\n\n**üöÄ Project Overview**\nThis project aims to analyze cancer-related data to uncover patterns, identify risk factors, and predict the probability of developing different cancer types. We will focus on:\n\n\n* Demographics & Risk Factors: Analyzing age, race, gender, and smoking habits.\n* Cancer Type Distribution: Identifying the most common cancers in different age groups and populations.\n* Predictive Analysis: Using machine learning models to predict cancer risk based on demographic and lifestyle factors.\n\n\n**üìå Key Questions to Explore**\n\n* Which cancer types are most common in different races?\n* Does smoking significantly increase the risk of specific cancers?\n* Is there a correlation between BMI and cancer stage?\n* What treatment is most effective for each cancer type?\n* What factors contribute to higher survival rates?\n\n","metadata":{}},{"cell_type":"markdown","source":"# **Step 1: Data Exploration & Cleaning**\nLet's first inspect the dataset to understand its structure.\n\n**üîπ Load & Preview Data**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\nimport xgboost as xgb\n\n\n# Load dataset\ndf = pd.read_csv(\"/kaggle/input/cancer-issue/cancer issue.csv\")\n\n# Display first few rows\ndf.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:51.867187Z","iopub.execute_input":"2025-01-15T07:09:51.867613Z","iopub.status.idle":"2025-01-15T07:09:54.895995Z","shell.execute_reply.started":"2025-01-15T07:09:51.867575Z","shell.execute_reply":"2025-01-15T07:09:54.89499Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Real-world datasets often contain missing values, duplicates, and inconsistencies. Cleaning ensures our analysis is accurate and models perform well.\n\n**Steps in Data Cleaning:**\n\n\n* Check for missing values\n* Handle duplicate entries\n\n\n**Check for Missing Values**","metadata":{}},{"cell_type":"code","source":"# Check missing values\ndf.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:54.896966Z","iopub.execute_input":"2025-01-15T07:09:54.897237Z","iopub.status.idle":"2025-01-15T07:09:54.916871Z","shell.execute_reply.started":"2025-01-15T07:09:54.897214Z","shell.execute_reply":"2025-01-15T07:09:54.915716Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Handle Missing Values**","metadata":{}},{"cell_type":"code","source":"# Replace missing values in 'GeneticMarker' with 'Unknown'\ndf['GeneticMarker'].fillna('Unknown', inplace=True)\n\n# Verify if missing values are handled\ndf['GeneticMarker'].isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:54.918196Z","iopub.execute_input":"2025-01-15T07:09:54.918518Z","iopub.status.idle":"2025-01-15T07:09:54.939098Z","shell.execute_reply.started":"2025-01-15T07:09:54.91849Z","shell.execute_reply":"2025-01-15T07:09:54.937943Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Check missing values\ndf.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:54.941959Z","iopub.execute_input":"2025-01-15T07:09:54.942263Z","iopub.status.idle":"2025-01-15T07:09:54.964013Z","shell.execute_reply.started":"2025-01-15T07:09:54.942237Z","shell.execute_reply":"2025-01-15T07:09:54.9625Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Remove Duplicate Records**","metadata":{}},{"cell_type":"code","source":"# Remove duplicate records based on 'PatientID'\ndf.drop_duplicates(subset='PatientID', inplace=True)\n\n# Verify the number of unique PatientID values\nunique_patient_count = df['PatientID'].nunique()\ntotal_records = len(df)\n\nunique_patient_count, total_records","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:54.965595Z","iopub.execute_input":"2025-01-15T07:09:54.966002Z","iopub.status.idle":"2025-01-15T07:09:54.987447Z","shell.execute_reply.started":"2025-01-15T07:09:54.965947Z","shell.execute_reply":"2025-01-15T07:09:54.986126Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Step 2: Exploratory Data Analysis (EDA)**\nüîπ Age Distribution of Cancer Patients","metadata":{}},{"cell_type":"markdown","source":"Goal\n\nAnalyze the age distribution of cancer patients to identify the most affected age groups.\n\nWhat We Did:\n\n* Created a histogram to show the number of cancer cases at different ages.\n* Added a KDE curve to highlight the overall trend.\n","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(8, 5))\nsns.histplot(df['Age'], bins=20, kde=True, color='blue')\n\n# Set Y-axis to start from 500\nplt.ylim(500) \n\nplt.title(\"Age Distribution of Cancer Patients\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Frequency\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:54.988686Z","iopub.execute_input":"2025-01-15T07:09:54.989035Z","iopub.status.idle":"2025-01-15T07:09:55.517591Z","shell.execute_reply.started":"2025-01-15T07:09:54.989007Z","shell.execute_reply":"2025-01-15T07:09:55.516469Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"üëâ Insight: Most cancer cases occur in middle-aged and older adults. Understanding this helps in better prevention and treatment strategies.","metadata":{}},{"cell_type":"markdown","source":"üîπ Heatmap of Cancer Cases by Race\n\nObjective\n\nThis heatmap helps identify which racial groups are most affected by different cancer types.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10, 5))\nax = sns.countplot(x=df[\"CancerType\"], order=df[\"CancerType\"].value_counts().index, palette=\"viridis\")\n\n# Add labels on each bar\nfor p in ax.patches:\n    ax.annotate(f'{p.get_height()}', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Set Y-axis to start from 2900\nplt.ylim(2900) \n\nplt.title(\"Most Common Cancer Types\")\nplt.xlabel(\"Cancer Type\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=45)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:55.518688Z","iopub.execute_input":"2025-01-15T07:09:55.518988Z","iopub.status.idle":"2025-01-15T07:09:55.83646Z","shell.execute_reply.started":"2025-01-15T07:09:55.518963Z","shell.execute_reply":"2025-01-15T07:09:55.835304Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Group data and create pivot table\nheatmap_data = df.groupby([\"Race/Ethnicity\", \"CancerType\"]).size().reset_index(name=\"Count\")\npivot_table = heatmap_data.pivot(index=\"Race/Ethnicity\", columns=\"CancerType\", values=\"Count\")\n\n# Fill missing values with 0 (if any)\npivot_table = pivot_table.fillna(0)\n\n# Plot heatmap\nplt.figure(figsize=(10, 6))\nsns.heatmap(pivot_table, cmap=\"coolwarm\", annot=True, fmt=\".0f\", linewidths=0.5)\n\n# Titles and Labels\nplt.title(\"Heatmap of Cancer Cases by Race\")\nplt.xlabel(\"Cancer Type\")\nplt.ylabel(\"Race/Ethnicity\")\n\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:55.837563Z","iopub.execute_input":"2025-01-15T07:09:55.837933Z","iopub.status.idle":"2025-01-15T07:09:56.246883Z","shell.execute_reply.started":"2025-01-15T07:09:55.83785Z","shell.execute_reply":"2025-01-15T07:09:56.24567Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Key Insights\n\n* **Breast** and **Skin** Cancer have the highest occurrences across **multiple racial groups**.\n* **Hispanic** and **Other** groups show a higher incidence of **Breast** and **Lung Cancer** compared to others.\n* **Caucasians** and **Asians** tend to have higher **Skin Cancer** rates.\n* **Leukemia** cases are more evenly distributed among **all racial groups**.\n\nWhy It Matters\nUnderstanding racial disparities in cancer cases can help in:\n\n‚úîÔ∏è Targeted awareness programs for high-risk groups.\n\n‚úîÔ∏è Better healthcare resource allocation for cancer treatment.\n\n‚úîÔ∏è Early screening and prevention efforts for vulnerable populations.","metadata":{}},{"cell_type":"markdown","source":"üîπ Analyzing Cancer Stage Distribution Across BMI Groups","metadata":{}},{"cell_type":"markdown","source":"\n","metadata":{}},{"cell_type":"markdown","source":"üîπ Count Cancer by BMI","metadata":{}},{"cell_type":"code","source":"# Define bins and labels\nbins = [0, 18.5, 24.9, 29.9, 34.9, 100]\nlabels = [\"Underwight\", \"Normal\", \"Overweight\", \"Obese\", \"Extremly Obese\"]\n\n# Create a new column for BMI groups\ndf[\"BMI_Group\"] = pd.cut(df[\"BMI\"], bins=bins, labels=labels, include_lowest=True)\n\n# Display sample data\ndf[[\"BMI\", \"BMI_Group\"]].head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:56.247853Z","iopub.execute_input":"2025-01-15T07:09:56.248173Z","iopub.status.idle":"2025-01-15T07:09:56.266708Z","shell.execute_reply.started":"2025-01-15T07:09:56.248141Z","shell.execute_reply":"2025-01-15T07:09:56.265451Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Is it any relationdhip Between Cancer Stage with BMI?","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(12, 5))\nax = sns.countplot(x=df[\"BMI_Group\"], palette=\"coolwarm\", order=labels)\n\n# Adjust labels inside bars for better readability\nfor p in ax.patches:\n    ax.annotate(f'{p.get_height()}', \n                (p.get_x() + p.get_width() / 2., p.get_height() + 100),  # Shift label inside the bar\n                ha='center', va='top', fontsize=12, fontweight='bold')  # White text inside bar\n\n# Set Y-axis to start from 600\nplt.ylim(4000, df[\"BMI_Group\"].value_counts().max() + 100) \n\n# Titles and Labels\nplt.title(\"Distribution of Patients by BMI Groups\")\nplt.xlabel(\"BMI Group\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=45)\n\n# Show plot\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:56.267515Z","iopub.execute_input":"2025-01-15T07:09:56.2678Z","iopub.status.idle":"2025-01-15T07:09:56.575533Z","shell.execute_reply.started":"2025-01-15T07:09:56.267775Z","shell.execute_reply":"2025-01-15T07:09:56.573442Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"üîπ Analyzing Cancer Stage Distribution Across BMI Groups\n\nIn this step, we explore how different BMI groups relate to cancer stages. The goal is to determine whether body weight influences the severity of cancer at diagnosis.","metadata":{}},{"cell_type":"code","source":"# Group data by Stage and BMI_Group\nbmi_stage_counts = df.groupby([\"Stage\", \"BMI_Group\"]).size().reset_index(name=\"Count\")\n\n# Display first few rows\nbmi_stage_counts.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:56.577105Z","iopub.execute_input":"2025-01-15T07:09:56.577488Z","iopub.status.idle":"2025-01-15T07:09:56.606816Z","shell.execute_reply.started":"2025-01-15T07:09:56.577456Z","shell.execute_reply":"2025-01-15T07:09:56.60542Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(12, 6))\n\n# Create a grouped bar plot\nax = sns.barplot(data=bmi_stage_counts, x=\"Stage\", y=\"Count\", hue=\"BMI_Group\", palette=\"magma\")\n\n# Add labels to each bar\nfor p in ax.patches:\n    ax.annotate(f'{int(p.get_height())}', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Titles and Labels\nplt.title(\"Cancer Stage Distribution Across BMI Groups\")\nplt.xlabel(\"Cancer Stage\")\nplt.ylabel(\"Number of Cases\")\nplt.xticks(rotation=45)\nplt.legend(title=\"BMI Group\", bbox_to_anchor=(1.05, 1), loc='upper left')\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:56.607861Z","iopub.execute_input":"2025-01-15T07:09:56.608144Z","iopub.status.idle":"2025-01-15T07:09:57.049335Z","shell.execute_reply.started":"2025-01-15T07:09:56.608118Z","shell.execute_reply":"2025-01-15T07:09:57.048247Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"üîç Key Insights:\n\n\n* Each bar represents the number of cases for a specific cancer stage (I-IV) within a BMI group (Underweight, Normal, Overweight, Obese, Extremely Obese).\n* Underweight patients appear to have higher case counts across all cancer stages.Other BMI groups (Normal, Overweight, Obese) show relatively similar distributions.\n* This analysis helps assess if BMI plays a role in cancer progression, potentially guiding early diagnosis strategies.\n","metadata":{}},{"cell_type":"markdown","source":"üîπ Treatment Type and how long the Survival Months","metadata":{}},{"cell_type":"markdown","source":"This step analyzes the distribution of cancer patients across different Survival Groups. The data is categorized into groups based on the number of months a patient survives after diagnosis.","metadata":{}},{"cell_type":"code","source":"# Sort data by SurvivalMonths (ascending)\ndf_sorted = df.sort_values(by=\"SurvivalMonths\", ascending=False)\n\n# Display the first few rows\ndf_sorted.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:57.053287Z","iopub.execute_input":"2025-01-15T07:09:57.053675Z","iopub.status.idle":"2025-01-15T07:09:57.077095Z","shell.execute_reply.started":"2025-01-15T07:09:57.05364Z","shell.execute_reply":"2025-01-15T07:09:57.075864Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Define bins and labels\nbins = [0, 20, 40, 60, 80, 100, 120]\nlabels = [\"Very Short\", \"Short\", \"Medium\", \"Long\", \"Very Long\", \"Extremely Long\"]\n\n# Create a new column for survival groups\ndf[\"SurvivalGroup\"] = pd.cut(df[\"SurvivalMonths\"], bins=bins, labels=labels, include_lowest=True)\n\n# Display sample data\ndf[[\"SurvivalMonths\", \"SurvivalGroup\"]].head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:57.078721Z","iopub.execute_input":"2025-01-15T07:09:57.079017Z","iopub.status.idle":"2025-01-15T07:09:57.094662Z","shell.execute_reply.started":"2025-01-15T07:09:57.078992Z","shell.execute_reply":"2025-01-15T07:09:57.093472Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 5))\nax = sns.countplot(x=df[\"SurvivalGroup\"], palette=\"coolwarm\", order=labels)\n# Add labels on each bar\nfor p in ax.patches:\n    ax.annotate(f'{p.get_height()}', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# Set Y-axis to start from 2800\nplt.ylim(2800) \n\nplt.title(\"Distribution of Patients by Survival Groups\")\nplt.xlabel(\"Survival Group\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=45)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:57.095958Z","iopub.execute_input":"2025-01-15T07:09:57.09627Z","iopub.status.idle":"2025-01-15T07:09:57.380684Z","shell.execute_reply.started":"2025-01-15T07:09:57.096242Z","shell.execute_reply":"2025-01-15T07:09:57.37958Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Group data by SurvivalGroup, TreatmentType, and CancerType\nsurvival_treatment_cancer = df.groupby([\"SurvivalGroup\", \"TreatmentType\", \"CancerType\"]).size().reset_index(name=\"Count\")\n\n# Display the first few rows\nsurvival_treatment_cancer.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:57.381763Z","iopub.execute_input":"2025-01-15T07:09:57.382069Z","iopub.status.idle":"2025-01-15T07:09:57.40385Z","shell.execute_reply.started":"2025-01-15T07:09:57.382035Z","shell.execute_reply":"2025-01-15T07:09:57.402636Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"This step examines the relationship between Survival Groups and Treatment Types, helping us understand which treatments contribute to longer survival.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(12, 3))\n\n# Create a grouped bar plot\nax = sns.barplot(data=survival_treatment_cancer, x=\"SurvivalGroup\", y=\"Count\", hue=\"TreatmentType\", palette=\"viridis\",\n                 errorbar=None)\n\n# Add labels to each bar\nfor p in ax.patches:\n    ax.annotate(f'{int(p.get_height())}', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=10, fontweight='bold')\n# Set Y-axis to start from 110\nplt.ylim(110) \n\n# Titles and Labels\nplt.title(\"Survival Group Comparison by Treatment Type\")\nplt.xlabel(\"Survival Group\")\nplt.ylabel(\"Patient Count\")\nplt.xticks(rotation=45)\nplt.legend(title=\"Treatment Type\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:57.405237Z","iopub.execute_input":"2025-01-15T07:09:57.405575Z","iopub.status.idle":"2025-01-15T07:09:57.97311Z","shell.execute_reply.started":"2025-01-15T07:09:57.405545Z","shell.execute_reply":"2025-01-15T07:09:57.971643Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Key Insights:\n\n\n* Surgery and Combination Therapy appear to have slightly higher patient counts in longer survival groups.\n* Chemotherapy and Radiation are more evenly distributed across all survival groups, suggesting their use across different cases.\n* Patients in the Short and Very Short survival groups receive similar distributions of treatments, indicating that certain cases may not respond well to treatment regardless of type.\n","metadata":{}},{"cell_type":"markdown","source":"üîπ Treatment Effectiveness by Cancer Type\n\nThis visualization compares the effectiveness of different treatment types across various cancer types.","metadata":{}},{"cell_type":"code","source":"# Add a new column 'Effectiveness' based on 'Recurrence'\ndf[\"Effectiveness\"] = df[\"Recurrence\"].apply(lambda x: 1 if x == \"No\" else 0)\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:57.974596Z","iopub.execute_input":"2025-01-15T07:09:57.975038Z","iopub.status.idle":"2025-01-15T07:09:58.00192Z","shell.execute_reply.started":"2025-01-15T07:09:57.974995Z","shell.execute_reply":"2025-01-15T07:09:58.000387Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Group by TreatmentType and CancerType, then calculate average effectiveness\ntreatment_effectiveness = df.groupby([\"TreatmentType\", \"CancerType\"])[\"Effectiveness\"].mean().reset_index()\n\n# Sort the results for better readability\ntreatment_effectiveness = treatment_effectiveness.sort_values(by=[\"CancerType\", \"Effectiveness\"], ascending=[True, False])\n\n# Display the results\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(12, 6))\nax = sns.barplot(x=\"Effectiveness\", y=\"CancerType\", hue=\"TreatmentType\", data=treatment_effectiveness, palette=\"viridis\")\n\nplt.title(\"Treatment Effectiveness by Cancer Type\")\nplt.xlabel(\"Effectiveness Score (Higher is Better)\")\nplt.ylabel(\"Cancer Type\")\nplt.legend(title=\"Treatment Type\", bbox_to_anchor=(1.05, 1), loc=\"upper left\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:58.002866Z","iopub.execute_input":"2025-01-15T07:09:58.003216Z","iopub.status.idle":"2025-01-15T07:09:58.384254Z","shell.execute_reply.started":"2025-01-15T07:09:58.003177Z","shell.execute_reply":"2025-01-15T07:09:58.383194Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Key Insights:\n\n\n* Combination Therapy and Surgery generally show the highest effectiveness across most cancer types.\n* Radiation and Chemotherapy appear to have similar effectiveness scores, slightly lower than the other treatments.\n* Effectiveness varies by cancer type, indicating that some treatments are more suitable for specific cancers.\n","metadata":{}},{"cell_type":"markdown","source":"üîπ Analyzing Smoking Habits and Cancer Types\n\nWe examine how smoking status (Smoker, Former Smoker, Non-Smoker) relates to different cancer types. The goal is to understand whether smoking significantly impacts the likelihood of developing specific cancers.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10, 2))\nax = sns.countplot(x=df[\"SmokingStatus\"], hue=df[\"Gender\"], palette=\"magma\")\n# Add labels to each bar\nfor p in ax.patches:\n    ax.annotate(f'{int(p.get_height())}', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=10, fontweight='bold')\n# Set Y-axis to start from 2800\nplt.ylim(2800) \n\nplt.title(\"Smoking vs. Cancer Type Distribution\")\nplt.xlabel(\"Smoking Status\")\nplt.ylabel(\"Count\")\nplt.legend(title=\"Cancer Type\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:58.385458Z","iopub.execute_input":"2025-01-15T07:09:58.38592Z","iopub.status.idle":"2025-01-15T07:09:58.661955Z","shell.execute_reply.started":"2025-01-15T07:09:58.385876Z","shell.execute_reply":"2025-01-15T07:09:58.660698Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create a FacetGrid to separate by Gender\ng = sns.FacetGrid(df, col=\"Gender\", height=5, aspect=1.2, sharey=True)\n\n# Map the countplot inside the grid\ng.map_dataframe(sns.countplot, x=\"SmokingStatus\", hue=\"CancerType\", palette=\"magma\")\n\n# Add labels on each bar\nfor ax in g.axes.flat:\n    for p in ax.patches:\n        ax.annotate(f'{int(p.get_height())}', \n                    (p.get_x() + p.get_width() / 2., p.get_height()), \n                    ha='center', va='bottom', fontsize=10, fontweight='bold')\n\n# Set Y-axis to start from 900\ng.set(ylim=(400, df[\"SmokingStatus\"].value_counts().max() - 5350))\n\n# Set titles and labels\ng.set_axis_labels(\"Smoking Status\", \"Count\")\ng.set_titles(col_template=\"{col_name}\")\n\n# Adjust legend\ng.add_legend(title=\"Cancer Type\")\n\n# Show the plot\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:58.663224Z","iopub.execute_input":"2025-01-15T07:09:58.663624Z","iopub.status.idle":"2025-01-15T07:09:59.6878Z","shell.execute_reply.started":"2025-01-15T07:09:58.663594Z","shell.execute_reply":"2025-01-15T07:09:59.686723Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Key Insights:\n\n\n* The first chart aggregates cancer cases by smoking status and gender, providing an overview of smoking prevalence across both male and female patients.\n* The second chart further breaks down smoking habits across cancer types, allowing for a detailed comparison.\n* If smoking is a key factor in cancer risk, we should observe clear differences in cancer distributions across smoking groups.\n","metadata":{}},{"cell_type":"markdown","source":"üîπ Genetic Markers and Cancer Type Distribution\n\nThis analysis explores the relationship between genetic markers and cancer types to understand the influence of genetic mutations on cancer prevalence.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10, 2))\nax = sns.countplot(x=df[\"GeneticMarker\"], hue=df[\"CancerType\"], palette=\"magma\")\n# Add labels to each bar\nfor p in ax.patches:\n    ax.annotate(f'{int(p.get_height())}', \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha='center', va='bottom', fontsize=10, fontweight='bold')\n# Set Y-axis to start from 650\nplt.ylim(650) \n\nplt.title(\"Genetic Marker vs. Cancer Type Distribution\")\nplt.xlabel(\"Genetic Marker\")\nplt.ylabel(\"Count\")\nplt.legend(title=\"Cancer Type\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:09:59.688943Z","iopub.execute_input":"2025-01-15T07:09:59.689337Z","iopub.status.idle":"2025-01-15T07:10:00.038567Z","shell.execute_reply.started":"2025-01-15T07:09:59.689301Z","shell.execute_reply":"2025-01-15T07:10:00.037222Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Key Insights:\n\n\n* The dataset includes several genetic markers: **BRCA1, KRAS, EGFR, and Unknown**.The distribution of cancer types across genetic markers helps identify genetic predispositions for certain cancers.\n* Some genetic markers, like **BRCA1**, are strongly associated with **Breast Cancer**, while **KRAS** is linked to **Lung and Colon Cancer**.\n* The Unknown category represents cases where no genetic marker was recorded, helping analyze cancers without a clear genetic correlation.\n","metadata":{}},{"cell_type":"markdown","source":"üîπ Age Group vs. Survival Duration Heatmap\n\nThis heatmap visualizes the relationship between age groups and survival duration of cancer patients, helping to identify trends in survival rates based on different age categories.","metadata":{}},{"cell_type":"code","source":"# Define Age bins and labels\nage_bins = [0, 18, 30, 45, 60, 75, 120]  # Covering all ages\nage_labels = [\"Child\", \"Young Adult\", \"Adult\", \"Middle Aged\", \"Senior\", \"Elderly\"]\n\n# Create a new column for Age Groups\ndf[\"AgeGroup\"] = pd.cut(df[\"Age\"], bins=age_bins, labels=age_labels, include_lowest=True)\n\n# Display the first few rows\ndf[[\"Age\", \"AgeGroup\"]].head(10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:00.039787Z","iopub.execute_input":"2025-01-15T07:10:00.040183Z","iopub.status.idle":"2025-01-15T07:10:00.05742Z","shell.execute_reply.started":"2025-01-15T07:10:00.040144Z","shell.execute_reply":"2025-01-15T07:10:00.056083Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Group data by AgeGroup and SurvivalMonths\nheatmap_data = df.groupby([\"AgeGroup\", \"SurvivalGroup\"]).size().reset_index(name=\"Count\")\n\n# Pivot table for heatmap\npivot_table = heatmap_data.pivot(index=\"SurvivalGroup\", columns=\"AgeGroup\", values=\"Count\")\n\n# Fill missing values with 0\npivot_table = pivot_table.fillna(0)\n\n# Plot heatmap\nplt.figure(figsize=(12, 6))\nsns.heatmap(pivot_table, cmap=\"coolwarm\", linewidths=0.5, annot=True, fmt=\".0f\")\n\n# Titles and Labels\nplt.title(\"Heatmap of Age Group vs. Survival Duration\")\nplt.xlabel(\"Age Group\")\nplt.ylabel(\"Survival Duration (Months)\")\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:00.058567Z","iopub.execute_input":"2025-01-15T07:10:00.058927Z","iopub.status.idle":"2025-01-15T07:10:00.494649Z","shell.execute_reply.started":"2025-01-15T07:10:00.058889Z","shell.execute_reply":"2025-01-15T07:10:00.493486Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Key Insights:\n\n\n* Children have the lowest survival counts across all categories, indicating that younger patients tend to have shorter survival durations.\n* Young Adults and Adults show higher survival numbers in the \"Long\" and \"Extremely Long\" categories.\n* Seniors and Elderly groups maintain relatively consistent survival durations, but their numbers in the Very Short and Short categories are still high.\n* Adults and Middle-aged patients have higher survival counts in the 'Extremely Long' category, suggesting that age plays a role in survival outcomes.\n","metadata":{}},{"cell_type":"markdown","source":"# **Step 3: Answer Question and Make Model**\n\n## 3.1. Which cancer types are most common in different races?\n\nThe heatmap of Cancer Cases by Race (as seen in the visualization) shows that:\n\n\n* **Breast Cancer** is highly prevalent among the **Other and Hispanic groups**.\n* **Leukemia** and **Skin Cancer** are more common among **Caucasians**.\n* **Lung Cancer** has a high occurrence across **all races** but is slightly dominant in **Asians and African Americans**.\n* **Colon** and **Prostate Cancer** are more evenly distributed but still show variations across races.\n\n","metadata":{}},{"cell_type":"code","source":"# Encode categorical variables\ndf_encoded = df.copy()\nle = LabelEncoder()\ndf_encoded[\"Race/Ethnicity\"] = le.fit_transform(df[\"Race/Ethnicity\"])\ndf_encoded[\"CancerType\"] = le.fit_transform(df[\"CancerType\"])\n\n# Define features and target\nX = df_encoded[[\"Race/Ethnicity\"]]\ny = df_encoded[\"CancerType\"]\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a classifier\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = model.predict(X_test)\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:00.495771Z","iopub.execute_input":"2025-01-15T07:10:00.496435Z","iopub.status.idle":"2025-01-15T07:10:00.970682Z","shell.execute_reply.started":"2025-01-15T07:10:00.496357Z","shell.execute_reply":"2025-01-15T07:10:00.969337Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"The accuracy of 0.16 (16%) for predicting cancer types based on race/ethnicity is quite low, meaning the model is not performing well. This suggests that race alone is not a strong predictor of cancer type and other factors (such as age, genetic markers, lifestyle habits, or family history) may play a more significant role.","metadata":{}},{"cell_type":"markdown","source":"## 3.2 Does smoking significantly increase the risk of specific cancers?\nFindings:\n    \n\n* The Smoking vs. Cancer Type Distribution chart (split by gender) suggests that:\n    * Lung Cancer is strongly associated with smokers, showing a significantly higher count.\n    * Former Smokers also show a high presence of Lung, Colon, and Prostate Cancer.\n    * Non-Smokers still have cases of cancer, but Lung Cancer is less frequent compared to smokers.\n\n\n* Predictive Insight:\n    * We can use logistic regression or decision trees to predict the probability of developing lung cancer based on smoking status.\n    * If a person has been a smoker for a long time, the model can estimate their risk factor for lung and colon cancer.","metadata":{}},{"cell_type":"code","source":"# Copy the dataset\ndf_encoded = df.copy()\n\n# Encode categorical variables\nle_cancer = LabelEncoder()\nle_smoking = LabelEncoder()\n\n# Encode CancerType\ndf_encoded[\"CancerType\"] = le_cancer.fit_transform(df_encoded[\"CancerType\"])\n\n# Encode SmokingStatus (to fix the error)\ndf_encoded[\"SmokingStatus\"] = le_smoking.fit_transform(df_encoded[\"SmokingStatus\"])\n\n# Print encoded labels for reference\nprint(\"Encoded Cancer Types:\", dict(zip(le_cancer.classes_, le_cancer.transform(le_cancer.classes_))))\nprint(\"Encoded Smoking Status:\", dict(zip(le_smoking.classes_, le_smoking.transform(le_smoking.classes_))))\n\n# Ensure 'Lung' exists before using it\nif \"Lung\" in le_cancer.classes_:\n    lung_encoded_value = le_cancer.transform([\"Lung\"])[0]  # Get the encoded value for \"Lung\"\nelse:\n    raise ValueError(\"Lung cancer type is missing from the dataset!\")\n\n# Define features (X) and target (y)\nX = df_encoded[[\"SmokingStatus\"]]\ny = (df_encoded[\"CancerType\"] == lung_encoded_value).astype(int)  # Convert to binary classification\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the classifier\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = model.predict(X_test)\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:00.971905Z","iopub.execute_input":"2025-01-15T07:10:00.972297Z","iopub.status.idle":"2025-01-15T07:10:01.345652Z","shell.execute_reply.started":"2025-01-15T07:10:00.972256Z","shell.execute_reply":"2025-01-15T07:10:01.344618Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"With an accuracy of 83%, the results strongly suggest that smoking is highly correlated with lung cancer. The model correctly predicts lung cancer presence based on smoking history in the majority of cases. This confirms that smokers and former smokers have a significantly higher likelihood of developing lung cancer. Therefore, the answer to the question \"Does smoking significantly increase the risk of specific cancers?\" is yes, with clear evidence showing a strong connection between smoking and lung cancer risk.","metadata":{}},{"cell_type":"markdown","source":"## 3.3 Is there a correlation between BMI and cancer stage?\n\nFindings:\n\n* The BMI Group vs. Cancer Stage visualization suggests:\n    * Underweight patients tend to have a higher percentage of later-stage cancers (III and IV).\n    * Normal and Overweight groups show a balanced distribution across all stages.\n    * Obese and Extremely Obese patients tend to be diagnosed earlier (Stage I or II).\n*Predictive Insight:\n* Using a correlation matrix and machine learning models (e.g., regression analysis), we can:\n    * Predict cancer stage based on BMI.\n    * Assess if patients with higher BMI are diagnosed earlier or if obesity increases cancer risk over time.","metadata":{}},{"cell_type":"code","source":"# Encode categorical variables for correlation matrix\ndf_encoded[\"Stage\"] = le.fit_transform(df[\"Stage\"])\ndf_encoded[\"BMI_Group\"] = le.fit_transform(df[\"BMI_Group\"])\n\n# Compute correlation\ncorrelation = df_encoded[[\"BMI_Group\", \"Stage\"]].corr()\nprint(correlation)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:01.346469Z","iopub.execute_input":"2025-01-15T07:10:01.346764Z","iopub.status.idle":"2025-01-15T07:10:01.365437Z","shell.execute_reply.started":"2025-01-15T07:10:01.346729Z","shell.execute_reply":"2025-01-15T07:10:01.363934Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Encode categorical variables\ndf_encoded = df.copy()\nle = LabelEncoder()\ndf_encoded[\"Stage\"] = le.fit_transform(df[\"Stage\"])\ndf_encoded[\"BMI_Group\"] = le.fit_transform(df[\"BMI_Group\"])\n\n# Define features (X) and target (y)\nX = df_encoded[[\"BMI_Group\"]]\ny = df_encoded[\"Stage\"]\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train the classifier\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(f\"Model Accuracy: {accuracy:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:01.366529Z","iopub.execute_input":"2025-01-15T07:10:01.366849Z","iopub.status.idle":"2025-01-15T07:10:01.797616Z","shell.execute_reply.started":"2025-01-15T07:10:01.366818Z","shell.execute_reply":"2025-01-15T07:10:01.796503Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"From the correlation analysis and predictive model:\n\n* Correlation Analysis:\n\n    * The correlation coefficient between BMI Group and Cancer Stage is 0.00839, which is very close to zero.\n    * This suggests almost no direct correlation between a patient's BMI and their cancer stage.\n* Predictive Model:\n\n    * A Random Forest Classifier was used to predict Cancer Stage based on BMI Group.\n    * The model achieved an accuracy of 25%, which is low, indicating that BMI alone is not a strong predictor of cancer stage.","metadata":{}},{"cell_type":"markdown","source":"## 3.4 What treatment is most effective for each cancer type?\n\nFindings:\n* The Treatment Effectiveness by Cancer Type chart shows:\n    * **Surgery** and **Combination Therapy** tend to have **higher effectiveness** scores.\n    * **Chemotherapy** is more effective for **Leukemia** and **Breast Cancer**.\n    * **Radiation** works well for **Lung** and **Prostate Cancer**.\n* Predictive Insight:\n    * We can use classification models (Random Forest, Decision Trees) to predict which treatment is most effective for a specific patient based on:\n        * Cancer Type\n        * Age\n        * Genetic Markers\n        * Stage\n        * Effectiveness","metadata":{}},{"cell_type":"markdown","source":"### 3.4.1 Predicting If Combination Therapy Has a Higher Effectiveness Score\n\nWe will train a model to predict whether Combination Therapy is the most effective treatment.","metadata":{}},{"cell_type":"code","source":"# Copy dataset\ndf_encoded = df.copy()\n\n# Initialize label encoders\nle_treatment = LabelEncoder()\nle_cancer = LabelEncoder()\nle_marker = LabelEncoder()\nle_stage = LabelEncoder()\nle_recurrence = LabelEncoder()\n\n# Fit encoders on full columns\ndf_encoded[\"TreatmentType\"] = le_treatment.fit_transform(df_encoded[\"TreatmentType\"])\ndf_encoded[\"CancerType\"] = le_cancer.fit_transform(df_encoded[\"CancerType\"])\ndf_encoded[\"GeneticMarker\"] = le_marker.fit_transform(df_encoded[\"GeneticMarker\"])\ndf_encoded[\"Stage\"] = le_stage.fit_transform(df_encoded[\"Stage\"])\ndf_encoded[\"Recurrence\"] = le_recurrence.fit_transform(df_encoded[\"Recurrence\"])\n\n# Check if \"Combination Therapy\" is in the encoded classes\nif \"Combination Therapy\" in le_treatment.classes_:\n    combo_encoded = le_treatment.transform([\"Combination Therapy\"])[0]\nelse:\n    raise ValueError(\"Combination Therapy is missing from the dataset!\")\n\n# Define features (X) and target (y) for Combination Therapy\nX = df_encoded[[\"CancerType\", \"Age\", \"GeneticMarker\", \"Stage\", \"Recurrence\"]]\ny = (df_encoded[\"TreatmentType\"] == combo_encoded).astype(int)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(f\"Combination Therapy Effectiveness Prediction Accuracy: {accuracy:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:01.798797Z","iopub.execute_input":"2025-01-15T07:10:01.799167Z","iopub.status.idle":"2025-01-15T07:10:03.237798Z","shell.execute_reply.started":"2025-01-15T07:10:01.799138Z","shell.execute_reply":"2025-01-15T07:10:03.236606Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"\n* The model predicts whether Combination Therapy is the most effective treatment for a given patient based on Cancer Type, Age, Genetic Marker, Stage, and Recurrence Status.\n* The accuracy of the model is 67%, meaning that it can correctly predict the effectiveness of Combination Therapy for a patient 67% of the time.\n* This suggests that Combination Therapy has a noticeable impact on treatment outcomes, but there are other factors influencing its effectiveness.\n","metadata":{}},{"cell_type":"markdown","source":"### 3.4.2 Predicting If Chemotherapy is More Effective for Leukemia and Breast Cancer","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\n\n# Copy dataset\ndf_encoded = df.copy()\n\n# Initialize label encoders\nle_treatment = LabelEncoder()\nle_cancer = LabelEncoder()\nle_marker = LabelEncoder()\nle_stage = LabelEncoder()\nle_recurrence = LabelEncoder()\n\n# Fit encoders on full columns\ndf_encoded[\"TreatmentType\"] = le_treatment.fit_transform(df_encoded[\"TreatmentType\"])\ndf_encoded[\"CancerType\"] = le_cancer.fit_transform(df_encoded[\"CancerType\"])\ndf_encoded[\"GeneticMarker\"] = le_marker.fit_transform(df_encoded[\"GeneticMarker\"])\ndf_encoded[\"Stage\"] = le_stage.fit_transform(df_encoded[\"Stage\"])\ndf_encoded[\"Recurrence\"] = le_recurrence.fit_transform(df_encoded[\"Recurrence\"])\n\n# Check if \"Chemotherapy\" is in the encoded classes\nif \"Chemotherapy\" in le_treatment.classes_:\n    chemo_encoded = le_treatment.transform([\"Chemotherapy\"])[0]\nelse:\n    raise ValueError(\"Chemotherapy is missing from the dataset!\")\n\n# Check if \"Leukemia\" and \"Breast\" are in the encoded classes\nif \"Leukemia\" in le_cancer.classes_ and \"Breast\" in le_cancer.classes_:\n    leukemia_encoded = le_cancer.transform([\"Leukemia\"])[0]\n    breast_encoded = le_cancer.transform([\"Breast\"])[0]\nelse:\n    raise ValueError(\"Leukemia or Breast Cancer is missing from the dataset!\")\n\n# Define features (X) and target (y) for Chemotherapy effectiveness in Leukemia and Breast Cancer\nX = df_encoded[[\"CancerType\", \"Age\", \"GeneticMarker\", \"Stage\", \"Recurrence\"]]\ny = ((df_encoded[\"TreatmentType\"] == chemo_encoded) & \n     ((df_encoded[\"CancerType\"] == leukemia_encoded) | \n      (df_encoded[\"CancerType\"] == breast_encoded))).astype(int)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(f\"Chemotherapy Effectiveness Prediction Accuracy for Leukemia & Breast Cancer: {accuracy:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:03.238839Z","iopub.execute_input":"2025-01-15T07:10:03.239208Z","iopub.status.idle":"2025-01-15T07:10:04.056605Z","shell.execute_reply.started":"2025-01-15T07:10:03.239178Z","shell.execute_reply":"2025-01-15T07:10:04.055351Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import accuracy_score\n\n# Copy dataset\ndf_encoded = df.copy()\n\n# Initialize label encoders\nle_treatment = LabelEncoder()\nle_cancer = LabelEncoder()\nle_marker = LabelEncoder()\nle_stage = LabelEncoder()\nle_recurrence = LabelEncoder()\n\n# Fit encoders on full columns\ndf_encoded[\"TreatmentType\"] = le_treatment.fit_transform(df_encoded[\"TreatmentType\"])\ndf_encoded[\"CancerType\"] = le_cancer.fit_transform(df_encoded[\"CancerType\"])\ndf_encoded[\"GeneticMarker\"] = le_marker.fit_transform(df_encoded[\"GeneticMarker\"])\ndf_encoded[\"Stage\"] = le_stage.fit_transform(df_encoded[\"Stage\"])\ndf_encoded[\"Recurrence\"] = le_recurrence.fit_transform(df_encoded[\"Recurrence\"])\n\n# Check if \"Radiation\" is in the encoded classes\nif \"Radiation\" in le_treatment.classes_:\n    radiation_encoded = le_treatment.transform([\"Radiation\"])[0]\nelse:\n    raise ValueError(\"Radiation is missing from the dataset!\")\n\n# Check if \"Lung\" and \"Prostate\" are in the encoded classes\nif \"Lung\" in le_cancer.classes_ and \"Prostate\" in le_cancer.classes_:\n    lung_encoded = le_cancer.transform([\"Lung\"])[0]\n    prostate_encoded = le_cancer.transform([\"Prostate\"])[0]\nelse:\n    raise ValueError(\"Lung or Prostate Cancer is missing from the dataset!\")\n\n# Define features (X) and target (y) for Radiation effectiveness in Lung and Prostate Cancer\nX = df_encoded[[\"CancerType\", \"Age\", \"GeneticMarker\", \"Stage\", \"Recurrence\"]]\ny = ((df_encoded[\"TreatmentType\"] == radiation_encoded) & \n     ((df_encoded[\"CancerType\"] == lung_encoded) | \n      (df_encoded[\"CancerType\"] == prostate_encoded))).astype(int)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(f\"Radiation Effectiveness Prediction Accuracy for Lung & Prostate Cancer: {accuracy:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:04.057518Z","iopub.execute_input":"2025-01-15T07:10:04.057837Z","iopub.status.idle":"2025-01-15T07:10:04.860374Z","shell.execute_reply.started":"2025-01-15T07:10:04.057809Z","shell.execute_reply":"2025-01-15T07:10:04.859135Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"From the machine learning models used to predict treatment effectiveness based on Cancer Type, Age, Genetic Markers, Stage, and Recurrence Status, we obtained the following results:\n\nCombination Therapy Effectiveness Prediction:\n\n* **Accuracy: 67%**\nThis suggests that Combination Therapy is somewhat effective but has moderate variability in its effectiveness across different cancer types. More refined models with additional features might improve accuracy.\nChemotherapy Effectiveness for Leukemia & Breast Cancer\n\n* **Accuracy: 87%**\nThis indicates that Chemotherapy is highly effective for treating Leukemia and Breast Cancer. The model successfully identifies chemotherapy as a preferred treatment for these cancers.\nRadiation Effectiveness for Lung & Prostate Cancer\n\n* **Accuracy: 89%**\nThis result confirms that Radiation Therapy is highly effective for Lung and Prostate Cancer. The high accuracy suggests strong correlations between these cancers and radiation treatment success.","metadata":{}},{"cell_type":"markdown","source":"## 3.5 What factors contribute to higher survival rates?\n\nFindings:\n* The Survival Duration vs. Age Group heatmap shows that:\n    * Young Adults and Adults tend to have longer survival durations.\n    * Children have the shortest survival time.\n    * BMI, Smoking, and Genetic Markers also influence survival rates.\nPredictive Insight:\n* A Survival Prediction Model (Logistic Regression or XGBoost) can be built using:\n     * Age, Cancer Type, Treatment Type, Smoking Status, BMI, and Genetic Markers as input features.\n     * The model can predict expected survival months and classify a patient into low-risk or high-risk survival groups.\nTo analyze what factors contribute to higher survival rates, we will build a Survival Prediction Model using Logistic Regression or XGBoost. This model will classify patients into low-risk or high-risk survival groups based on key features such as:\n\n    * Age\n    * Cancer Type\n    * Treatment Type\n    * Smoking Status\n    * BMI\n    * Genetic Markers\n    * Family History","metadata":{}},{"cell_type":"code","source":"# Copy dataset\ndf_encoded = df.copy()\n\n# Initialize label encoders\nle_cancer = LabelEncoder()\nle_treatment = LabelEncoder()\nle_smoking = LabelEncoder()\nle_genetic = LabelEncoder()\nle_family = LabelEncoder()\nle_survival = LabelEncoder()\n\n# Encode categorical variables\ndf_encoded[\"CancerType\"] = le_cancer.fit_transform(df_encoded[\"CancerType\"])\ndf_encoded[\"TreatmentType\"] = le_treatment.fit_transform(df_encoded[\"TreatmentType\"])\ndf_encoded[\"SmokingStatus\"] = le_smoking.fit_transform(df_encoded[\"SmokingStatus\"])\ndf_encoded[\"GeneticMarker\"] = le_genetic.fit_transform(df_encoded[\"GeneticMarker\"])\ndf_encoded[\"FamilyHistory\"] = le_family.fit_transform(df_encoded[\"FamilyHistory\"])\n\n# Define survival groups (Low Risk = 0, High Risk = 1)\ndf_encoded[\"SurvivalGroup\"] = (df_encoded[\"SurvivalMonths\"] > df_encoded[\"SurvivalMonths\"].median()).astype(int)\n\n# Define features (X) and target (y)\nX = df_encoded[[\"Age\", \"CancerType\", \"TreatmentType\", \"SmokingStatus\", \"BMI\", \"GeneticMarker\", \"FamilyHistory\"]]\ny = df_encoded[\"SurvivalGroup\"]\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train XGBoost model\nmodel = xgb.XGBClassifier(n_estimators=100, max_depth=3, learning_rate=0.1, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = model.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\n\nprint(f\"Updated Survival Prediction Model Accuracy : {accuracy:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-15T07:10:04.861509Z","iopub.execute_input":"2025-01-15T07:10:04.861928Z","iopub.status.idle":"2025-01-15T07:10:05.034096Z","shell.execute_reply.started":"2025-01-15T07:10:04.86188Z","shell.execute_reply":"2025-01-15T07:10:05.031948Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"The updated survival prediction model, which now includes Family History as a factor, achieved an accuracy of 50%.\n\nKey Findings:\n\n‚úÖ Young Adults and Adults tend to have longer survival durations.\n\n‚úÖ Children have the shortest survival time, as confirmed by heatmaps and model predictions.\n\n‚úÖ BMI, Smoking, and Genetic Markers play a role in determining survival rates.\n\n‚úÖ Family History was added, but the model's accuracy remains moderate (50%), indicating that other factors may influence survival beyond the included features.\n\nInsights from the Model:\n\nüîπ Moderate Accuracy (50%) suggests that survival prediction is a complex problem with many contributing factors beyond just the selected features.\n\nüîπ Possible Improvements: Adding more medical details (e.g., tumor size, early detection indicators, response to treatment) could enhance model performance.\n\nüîπ Family History alone may not be the strongest determinant of survival‚Äîenvironmental factors, lifestyle, and medical interventions likely play a larger role.","metadata":{}},{"cell_type":"markdown","source":"# Conclusion\n\nFinal Conclusion: Understanding Cancer Trends and Predictions\nThrough data analysis and machine learning models, we have explored key factors influencing cancer trends, treatment effectiveness, and survival rates. The results offer meaningful insights into different aspects of cancer prediction and prevention.\n\n1. Most Common Cancer Types in Different Races\n    * Certain cancer types are more prevalent in specific racial groups.\n    * The heatmap analysis showed clear patterns of cancer distribution across races.\n    * A Random Forest classifier attempted to predict cancer type based on race but achieved a relatively low accuracy (16%), indicating that race alone is not a strong predictor of cancer type.\n\nConclusion:\nWhile racial groups show different distributions of cancer types, other factors like genetic predisposition and lifestyle choices are likely more influential in cancer risk.\n\n2. The Impact of Smoking on Cancer Risk\n    * Smoking significantly increases the risk of lung cancer.\n    * A machine learning model achieved an accuracy of 83%, successfully predicting lung cancer based on smoking status.\n    * Smokers and former smokers are at a higher risk compared to non-smokers.\n\nConclusion:\nThe strong correlation between smoking and lung cancer confirms the need for preventive measures such as smoking cessation programs and early screenings.\n\n3. Correlation Between BMI and Cancer Stage\n    * Underweight individuals tend to be diagnosed at later cancer stages (III & IV).\n    * Obese and extremely obese patients are more likely diagnosed at earlier stages (I & II).\n    * A Random Forest model attempted to predict cancer stage based on BMI but achieved only 25% accuracy, suggesting BMI alone is not a strong predictor of cancer stage.\n\nConclusion:\nBMI may influence cancer progression, but other health factors like medical history, tumor type, and lifestyle choices are likely more impactful.\n\n4. Effectiveness of Cancer Treatments\n    * Combination Therapy is widely used but has a moderate effectiveness score (67% prediction accuracy).\n    * Chemotherapy is highly effective for Leukemia and Breast Cancer, achieving an 87% accuracy in predicting when it is used.\n    * Radiation is effective for Lung and Prostate Cancer, with an 89% prediction accuracy.\n\nConclusion:\nTreatment effectiveness varies by cancer type. Precision medicine approaches‚Äîconsidering genetic markers, patient history, and personalized treatment plans‚Äîcan improve survival rates.\n\n5. Factors Contributing to Higher Survival Rates\n    * Young Adults and Adults tend to have longer survival durations compared to Children.\n    * BMI, Smoking, Genetic Markers, and Family History influence survival chances.\n    * A survival prediction model (XGBoost) achieved 50% accuracy, indicating that more factors need to be considered for accurate predictions.\n\n\n**Conclusion: Survival depends on multiple factors, and early diagnosis, lifestyle changes, and personalized treatment plans play crucial roles in improving survival chances.**\n\n\nOverall Conclusion and Future Work\n* Machine learning models helped identify risk factors, treatment effectiveness, and survival trends.\n* Smoking and treatment type are strong predictors, while race and BMI alone are weaker predictors of cancer outcomes.\n* Further model improvement could involve additional medical data (e.g., tumor size, blood test results) and deep learning techniques for more precise predictions.\n\nFinal Takeaway:\nPreventive strategies, early detection, and personalized treatments are key to reducing cancer risks and improving survival outcomes.\nWith continued advancements in AI and medical research, we can further refine predictive models to assist in cancer diagnosis and treatment planning. üöÄ","metadata":{}}]}